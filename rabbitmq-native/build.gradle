buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-doc"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    console "org.grails:grails-console"
    profile "org.grails.profiles:plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    testCompile "org.grails:grails-plugin-testing"

    compile 'commons-lang:commons-lang:2.6'
    compile 'org.codehaus.groovy:groovy-json:2.4.11'
    compile 'com.rabbitmq:amqp-client:4.2.0'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false

grailsPublish {
    githubSlug = 'budjb/grails-rabbitmq-native'
    license {
        name = 'Apache-2.0'
    }
    title = "RabbitMQ Native Plugin"
    developers = [budjb: "Bud Byrd", olliefreeman: "Oliver Freeman", "aaron-brown": "Aaron Brown"]
    repo = "grails-plugins"

    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    websiteUrl = 'https://github.com/budjb/grails-rabbitmq-native'
    vcsUrl = 'https://github.com/budjb/grails-rabbitmq-native.git'
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'compile' }
            }
        }
    }
}
